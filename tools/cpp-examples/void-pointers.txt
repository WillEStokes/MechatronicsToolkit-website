/*In this example, we have a function printValue that takes a void pointer and a string indicating
the type of data pointed to by the void pointer. The function uses static_cast to cast the void
pointer to a pointer of the specified type and dereferences it to print its value. In main, we
define several variables of different types and create void pointers that point to them. We then
pass each void pointer to printValue along with a string indicating its type, causing printValue
to print their values.*/

#include <iostream>
#include <string>

void printValue(void* value, const std::string& type) {
  if (type == "int") {
    std::cout << *(static_cast<int*>(value)) << std::endl;
  } else if (type == "double") {
    std::cout << *(static_cast<double*>(value)) << std::endl;
  } else if (type == "string") {
    std::cout << *(static_cast<std::string*>(value)) << std::endl;
  } else {
    std::cout << "Unknown type" << std::endl;
  }
}

int main() {
  int intValue = 42;
  double doubleValue = 3.14;
  std::string stringValue = "Hello, World!";

  void* intPointer = &intValue;
  void* doublePointer = &doubleValue;
  void* stringPointer = &stringValue;

  printValue(intPointer, "int");
  printValue(doublePointer, "double");
  printValue(stringPointer, "string");

  return 0;
}