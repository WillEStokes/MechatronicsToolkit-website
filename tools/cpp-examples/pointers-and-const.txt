//In this example, modifyValue takes a pointer to a constant int as an argument. This means that the
//value pointed to by the pointer cannot be modified within the modifyValue function. The const keyword
//enforces this restriction, making it a compile error to try to modify the value pointed to by the pointer.
//However, the pointer can still be used to access the value it points to.

#include <iostream>

void modifyValue(const int *ptr) {
  // This line would result in a compile error since ptr is a const pointer
  // *ptr = 10;

  // However, the pointer can still be used to access the value it points to
  std::cout << "Value: " << *ptr << std::endl;
}

int main() {
  int num = 5;
  int *ptr = &num;

  modifyValue(ptr);

  return 0;
}