/*In this example, Shape is a base class with a protected data member area and a pure virtual
function getArea that must be implemented by derived classes. Rectangle and Circle are derived
classes that inherit from Shape and implement the getArea function to calculate the area of a
rectangle and a circle, respectively. In the main function, objects of the classes Rectangle
and Circle are created, and pointers to Shape objects are created that point to these objects.
The areas of the rectangle and the circle are calculated and printed using the getArea function,
which is polymorphic and works with objects of the derived classes.*/

#include <iostream>

class Shape {
    protected:
        double area;
    public:
        Shape() {}
        virtual double getArea() = 0;
};

class Rectangle : public Shape {
    private:
        double length;
        double width;
    public:
        Rectangle(double l, double w) : length(l), width(w) {
            area = length * width;
        }
        double getArea() {
            return area;
        }
};

class Circle : public Shape {
    private:
        double radius;
    public:
        Circle(double r) : radius(r) {
            area = 3.14159 * radius * radius;
        }
        double getArea() {
            return area;
        }
};

int main() {
    Rectangle r(10.0, 5.0);
    Circle c(5.0);
    Shape *s1 = &r;
    Shape *s2 = &c;
    std::cout << "The area of the rectangle is: " << s1->getArea() << std::endl;
    std::cout << "The area of the circle is: " << s2->getArea() << std::endl;
    return 0;
}
